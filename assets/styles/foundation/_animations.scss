/* ----------------------- MIX-INS ----------------------------- */

/*
 * Functional mix-in responsible for setting transitions on elements
 *
 * @param $property - the property or properties upon which to set transitions upon
 * @param [$webkitProperty] - Because webkit browsers do not tolerate setting transitions upon CSS
 *		CSS properties that it does not recognize, a separate list of properties may need to be specified
 *		that would only be processed on webkit browsers
 * @param [$duration] - the number of seconds the animation is expected to last
 * @param [$timing] - the pace at which the transition will animate
 * @param [$delay] - the number of seconds to wait before initiating the animation
 * @param [$useBrowserSpecificReferences] - a flag indicating whether the passed property will need to have
 *		browser-specific prefixes prepended
 *
 * @author kinsho
 */
@mixin transitionSettings($property, $webkitProperty: false, $timing: ease, $duration: 2s, $delay: 0s, $useBrowserSpecificReferences: false)
{
	transition-property: $property;
	transition-timing-function: $timing;
	transition-duration: $duration;
	transition-delay: $delay;

	// In case browser-specific prefixes are needed here when specifying the property to transition upon,
	// set the $useBrowserSpecificReferences flag appropriately to execute the below block of code
	@if $useBrowserSpecificReferences
	{
		@include webkitTransitionSettings('-webkit-' + $property, $timing, $duration, $delay);
		@include mozTransitionSettings('-moz-' + $property, $timing, $duration, $delay);
		@include msTransitionSettings('-ms-' + $property, $timing, $duration, $delay);
		@include oTransitionSettings('-o-' + $property, $timing, $duration, $delay);
	}
	@else
	{
		@include webkitTransitionSettings($property, $timing, $duration, $delay);
		@include mozTransitionSettings($property, $timing, $duration, $delay);
		@include msTransitionSettings($property, $timing, $duration, $delay);
		@include oTransitionSettings($property, $timing, $duration, $delay);
	}

	@if ($webkitProperty)
	{
		/*
			Webkit browsers do not tolerate specifying properties that are considered invalid according to its own
			dictionary of valid CSS properties
		*/
		@media screen and (-webkit-min-device-pixel-ratio:0)
		{
			transition-property: $webkitProperty;
			@include webkitTransitionSettings($webkitProperty, $timing, $duration, $delay);
		}
	}
}

/*
 * Functional mix-in responsible for setting all animation-related settings across all the major browsers
 *
 * @param [$keyframeSet] - the name of the set of keyframes towards which to apply these settings
 * @param [$duration] - the duration of the animation
 * @param [$timing] - the pace at which the animation will progress
 * @param [$delay] - the amount of time to wait before the animation begins
 * @param [$iterations] - the number of times which to execute the animation
 * @param [$direction] - the direction in which the animation should play over time
 * @param [$persist] - a flag indicating whether the end state of the animation should persist after the animation ends
 *
 * @author kinsho
 */
@mixin animationSettings($keyframeSet: false, $duration: false, $timing: false, $delay: false, $iterations: 1, $direction: normal, $persist: false)
{
	@if ($keyframeSet)
	{
		animation-name: $keyframeSet;
		-webkit-animation-name: $keyframeSet;
		-moz-animation-name: $keyframeSet;
		-ms-animation-name: $keyframeSet;
		-o-animation-name: $keyframeSet;
	}

	@if ($duration)
	{
		animation-duration: $duration;
		-webkit-animation-duration: $duration;
		-moz-animation-duration: $duration;
		-ms-animation-duration: $duration;
		-o-animation-duration: $duration;
	}

	@if ($timing)
	{
		animation-timing-function: $timing;
		-webkit-animation-timing-function: $timing;
		-moz-animation-timing-function: $timing;
		-ms-animation-timing-function: $timing;
		-o-animation-timing-function: $timing;
	}

	@if ($delay)
	{
		animation-delay: $delay;
		-webkit-animation-delay: $delay;
		-moz-animation-delay: $delay;
		-ms-animation-delay: $delay;
		-o-animation-delay: $delay;
	}

	@if ($direction)
	{
		animation-direction: $direction;
		-webkit-animation-direction: $direction;
		-moz-animation-direction: $direction;
		-ms-animation-direction: $direction;
		-o-animation-direction: $direction;
	}

	@if ($persist)
	{
		animation-fill-mode: forwards;
		-webkit-animation-fill-mode: forwards;
		-moz-animation-fill-mode: forwards;
		-ms-animation-fill-mode: forwards;
		-o-animation-fill-mode: forwards;
	}

	animation-iteration-count: $iterations;
	-webkit-animation-iteration-count: $iterations;
	-moz-animation-iteration-count: $iterations;
	-ms-animation-iteration-count: $iterations;
	-o-animation-iteration-count: $iterations;
}

/*
 * Functional mix-in responsible for setting transitions on elements within webkit browsers
 *
 * @param $property - the property or properties upon which to set transitions upon
 * @param [$timing] - the pace at which the transition will animate
 * @param [$duration] - the number of seconds the animation is expected to last
 * @param [$delay] - the number of seconds to wait before initiating the animation
 *
 * @author kinsho
 */
@mixin webkitTransitionSettings($property, $timing: ease, $duration: 2s, $delay: 0s)
{
	-webkit-transition-property: $property;
	-webkit-transition-timing-function: $timing;
	-webkit-transition-duration: $duration;
	-webkit-transition-delay: $delay;
}

/*
 * Functional mix-in responsible for setting transitions on elements within gecko browsers
 *
 * @param $property - the property or properties upon which to set transitions upon
 * @param [$timing] - the pace at which the transition will animate
 * @param [$duration] - the number of seconds the animation is expected to last
 * @param [$delay] - the number of seconds to wait before initiating the animation
 *
 * @author kinsho
 */
@mixin mozTransitionSettings($property, $timing: ease, $duration: 2s, $delay: 0s)
{
	-moz-transition-property: $property;
	-moz-transition-timing-function: $timing;
	-moz-transition-duration: $duration;
	-moz-transition-delay: $delay;
}

/*
 * Functional mix-in responsible for setting transitions on elements within trident browsers
 *
 * @param $property - the property or properties upon which to set transitions upon
 * @param [$timing] - the pace at which the transition will animate
 * @param [$duration] - the number of seconds the animation is expected to last
 * @param [$delay] - the number of seconds to wait before initiating the animation
 *
 * @author kinsho
 */
@mixin msTransitionSettings($property, $timing: ease, $duration: 2s, $delay: 0s)
{
	-ms-transition-property: $property;
	-ms-transition-timing-function: $timing;
	-ms-transition-duration: $duration;
	-ms-transition-delay: $delay;
}

/*
 * Functional mix-in responsible for setting transitions on elements within opera browsers
 *
 * @param $property - the property or properties upon which to set transitions upon
 * @param [$timing] - the pace at which the transition will animate
 * @param [$duration] - the number of seconds the animation is expected to last
 * @param [$delay] - the number of seconds to wait before initiating the animation
 *
 * @author kinsho
 */
@mixin oTransitionSettings($property, $timing: ease, $duration: 2s, $delay: 0s)
{
	-o-transition-property: $property;
	-o-transition-timing-function: $timing;
	-o-transition-duration: $duration;
	-o-transition-delay: $delay;
}

/*
 * Mix-in responsible for setting up keyframes across all the major browsers
 * NOTE: The content to populate the body of the keyframes are provided through the use of the
 * 		@content directive. Any invocation of this mix-in must have external content attached.
 *
 * @param $name - the name to assign to the keyframes being generated
 *
 * @author kinsho
 */
@mixin keyframes($name)
{
	@keyframes #{$name}
	{
		@content;
	}

	@-webkit-keyframes #{$name}
	{
		@content;
	}

	@-moz-keyframes #{$name}
	{
		@content;
	}

	@-ms-keyframes #{$name}
	{
		@content;
	}

	@-o-keyframes #{$name}
	{
		@content;
	}
}

/*
 * Mix-in designed to shift elements on a two-dimensional plane
 *
 * @param [$x] - the horizontal magnitude of the shift
 * @param [$y] - the vertical magnitude of the shift
 *
 * @author kinsho
 */
@mixin shiftTransition($x: 0%, $y: 0%)
{
	transform:translate($x, $y);
	-webkit-transform:translate($x, $y);
	-moz-transform:translate($x, $y);
	-ms-transform:translate($x, $y);
	-o-transform:translate($x, $y);
}

/*
 * Mix-in designed to scale elements on a two-dimensional plane
 *
 * @param [$length] - the resize multiplier to apply to the length of the element
 * @param [$width] - the resize multiplier to apply to the width of the element
 *
 * @author kinsho
 */
@mixin scaleTransition($length: 1, $width: 1)
{
	transform:scale($length, $width);
	-webkit-transform:scale($length, $width);
	-moz-transform:scale($length, $width);
	-ms-transform:scale($length, $width);
	-o-transform:scale($length, $width);
}

/*
 * Mix-in designed to rotate elements on a two-dimensional plane
 *
 * @param $degrees - the amount of rotation to apply to the element
 *
 * @author kinsho
 */
@mixin rotateTransition($degrees)
{
	transform:rotate($degrees);
	-webkit-transform:rotate($degrees);
	-moz-transform:rotate($degrees);
	-ms-transform:rotate($degrees);
	-o-transform:rotate($degrees);
}

/*
 * Mix-in designed to rotate elements on a two-dimensional plane
 *
 * @param $degrees - the amount of rotation to apply to the element
 * @param [$x] - the horizontal magnitude of the shift
 * @param [$y] - the vertical magnitude of the shift
 *
 * @author kinsho
 */
@mixin rotateAndShiftTransition($degrees, $x: 0%, $y: 0%)
{
	transform:translate($x, $y) rotate($degrees);
	-webkit-transform:translate($x, $y) rotate($degrees);
	-moz-transform:translate($x, $y) rotate($degrees);
	-ms-transform:translate($x, $y) rotate($degrees);
	-o-transform:translate($x, $y) rotate($degrees);
}

/*
 * Mix-in designed to rotate elements on a three-dimensional plane
 *
 * @param $degrees - the amount of rotation to apply to the element
 * @param $rotateByX - the x-coordinate of the rotation vector
 * @param $rotateByY - the y-coordinate of the rotation vector
 * @param $rotateByZ - the z-coordinate of the rotation vector 
 *
 * @author kinsho
 */
@mixin rotateTransition3D($degrees, $rotateByX: 1, $rotateByY: 1, $rotateByZ: 1)
{
	transform:rotate3d($rotateByX, $rotateByY, $rotateByZ, $degrees);
	-webkit-transform:rotate3d($rotateByX, $rotateByY, $rotateByZ, $degrees);
	-moz-transform:rotate3d($rotateByX, $rotateByY, $rotateByZ, $degrees);
	-ms-transform:rotate3d($rotateByX, $rotateByY, $rotateByZ, $degrees);
	-o-transform:rotate3d($rotateByX, $rotateByY, $rotateByZ, $degrees);

}

/*
 * Mix-in designed to reset the location of the origin on a specific element
 * Moving the point of origin around allows for a variety of different 2D and 3D rotation animations on the element
 * Note that when setting a two-dimensional origin point, don't pass a parameter for the z-coordinate when invoking this mixin
 *
 * @param [$x] - the x-coordinate for the new origin coordinate
 * @param [$y] - the y-coordinate for the new origin coordinate
 * @param [$z] - the z-coordinate for the new origin coordinate
 *
 * @author kinsho
 */
@mixin setAxes($x: 0px, $y: 0px, $z: 0px)
{
	transform-origin: $x $y $z;
	-webkit-transform-origin: $x $y $z;
	-moz-transform-origin: $x $y $z;
	-ms-transform-origin: $x $y $z;
	-o-transform-origin: $x $y $z;
}

/*
 * Mix-in generates an animation that shifts an element either to the left or the right
 *
 * @param $name - the name to assign to the animation currently being defined
 * @param $shiftMagnitude - the amount by which to shift the element toward either the left or the right
 * 		A positive value indicates a rightward shift while a negative value denotes a leftward shift.
 * @param [$startingPosition] - the starting position of the element, expressed as a translation percentage
 * @param [$shiftTimingFunction] - the pacing function to apply to the shift, if provided
 *
 * @author kinsho
 */
@mixin shiftHorizontal($name, $shiftMagnitude, $shiftTimingFunction, $startingPosition: 0%)
{
	@include keyframes($name)
	{
		0%
		{
			@include shiftTransition();

			@if ($shiftTimingFunction)
			{
				@include animationSettings($timing: $shiftTimingFunction);
			}

			@if ($startingPosition)
			{
				@include shiftTransition($x: $startingPosition);
			}
		}

		100%
		{
			@include shiftTransition($x: $shiftMagnitude);
		}
	}
}